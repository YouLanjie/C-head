#+title: 一个简单的工程
#+author: Chglish
#+description: 这是描述文件

* C-head
** 我想说的
这个仓库的名字其实是不太合适的，因为这个仓库本来是储存我编写C语言程序时用于方便
地引用一些头文件与使用一些所有程序都能用的功能。
#+begin_quote
警告！该仓库的内容并不能无缝移植到Windows平台，请自行忽略 =#ifdef _WIN32= 中的内
容
#+end_quote
** 使用方法
要使用本仓库的工具仅需要在程序内引用 =include= 目录下的 =tools.h= 文件，并且在编
译程序时让编译器链接 =lib= 目录下编译好的任意一个（对应你系统的）库文件以及链接
ncursesw库即可。
#+begin_quote
=lib=下的库文件是在 /x86_64/ 架构下编译的，如果你的系统架构不是 /x86_64/ 也可以
自行编译源代码为库文件或者直接将源代码复制到工程目录（或者其他目录）并在编译时也
将该仓库内的源代码也引用上

而使用动态库与静态库的方法我不再赘述，请自行搜索
#+end_quote
** 仓库功能
#+begin_quote
注意！本README文件内容可能会跟不上代码翻新的速度，具体功能请以实际代码为准
#+end_quote
*** 定义了Linux标准库没有的特殊输入函数
- =ctools_getch()= 不回显的输入函数，可供实现 _等待用户输入，输入后无需回车确认
  让程序继续并且不显示输入的字符_ 的功能（返回整数值作为字符值）（即输入不回显，
  无行缓冲）。
- =ctools_kbhit= 函数，可以判断当且是否有输入（返回整数值，1有，0无）。
- =ctools_kbhitGetchar= 基于 =kbhit= 函数的基础上加上一些修改能够顺便获取输入的
  字符，且无需等待输入，不会阻止程序的继续运行。
#+begin_quote
在windows下编译的库不会定义 =getch= 与 =kbhit= 函数，而是引入windows的 =conio.h=
头文件，因为windows内置这两个函数
#+end_quote
*** 定义了一些宏定义
- =Clear_TER= 用于清屏，但是只是打印字符 =\033[2J= 清屏，会在屏幕上打印大量的空
  格，滚动条可以向上翻，可以配合 =\033= 控制符为程序打上一个底色
- =Clear_SYS= 同样用于清屏，但是是调用系统命令，在Linux下这样会稍慢一些但又干净
  一些，而在Windows下效果同上，但用系统函数移动光标时会移动到上面的内容，除非使
  用 =\033[%d;%dH= 的形式移动光标（但较老的win系统似乎不支持）
- =Gotoxy_TER= 本来是用于适配windows用系统函数的方式移动光标的，但是发现
  windows10下也支持使用 =\033= 移动光标后就改为了一个宏定义，基本无用。
*** 自行编写的通用工具
**** 个人认为最有用的——menu菜单功能
注意：该功能现未通过兼容测试

该功能能够在Linux环境下实现屏幕大小对齐（过小的终端不可用）。提供可视化选择。并
且可以为选项添加描述，充当半个帮助。选项、描述采用滚动设计，若光标移动到了显示上
限但还有选项时会让选项上滚，描述也同理，都是可以翻动的，并且描述还使用了白底黑字
做显示颜色（可能有的终端会显示成黑底黑色），选中项则做反色处理
***** 功能介绍：接口一览
该功能并非仅有一个函数，而是由多个函数组成

为确保该功能能够拥有较好的扩展性，我使用了些面向对象的思想，定义了两个结构体，其
中有一个还是是使用了 =typedef= 加以修饰的

#+begin_src c
  /* 
   ,* 新菜单
   ,*/
  struct ctools_menu_t;		/* 菜单类/结构体 */
  typedef struct {
          void (*const ncurses_init)();
          void (*const data_init)(struct ctools_menu_t ** data);
          void (*const set_title)(struct ctools_menu_t * data, char *title);
          void (*const set_type)(struct ctools_menu_t * data, char *type_str);
          void (*const set_text)(struct ctools_menu_t * data, ...);
          void (*const add_text)(struct ctools_menu_t * data, char *new_text);
          void (*const set_text_data)(struct ctools_menu_t * data, char *type_str, char *format, ...);
          void (*const add_text_data)(struct ctools_menu_t * data, char *type_str, char *obj);
          int (*const show)(struct ctools_menu_t * data);
  } ctools_menu;
  /* extern const ctools_menu CT_MENU; */
  /* use by `CT_MENU` */

  #define ctools_menu_TextTypeNumber   1
  #define ctools_menu_TextTypeButton   2
#+end_src 

上面是对用户公开的所有内容。  
在使用菜单时需要定义一个 =struct ctools_menu_t= 型的变量并调用结构体 =CT_MENU=
中的 =data_init= 函数用于为变量初始化。

以下是对各个函数的说明：

- =ncurses_init=
  初始化ncurses
- =data_init=
  初始化数据结构体
- =set-title=
  设置界面标题
- =set_type=
  设置菜单的类型
  - 类型列表
    1. =normal= 默认
    2. =main_only= 仅显示主界面
    3. =help= 帮助模式
    4. =setting= 设置模式
    5. =help_only= 仅显示帮助界面，无输入处理
- =set_text=
  设置菜单的选项，可选参数类型为char（最后一个参数必须为 =NULL= !）
- =add_text=
  添加菜单选项
- =set_text_data=
  为菜单的各个选项设置属性。
  - 第二参数：属性的类型
    - =describe= 描述
    - =type= 类型/选项
    - =var= 调整的变量
    - =foot= 步长
    - =max= 变量的最大值
    - =min= 变量的最小值
  - 第三参数：控制字符串
    - =%s= 用于告诉程序将未使用的参数分配给第N个节点（N从1算起）
    - =n= 用于跳过节点（大小写通用）
    - 示例： ="%s %s N %s N N N %s"=  
      将参数一次写入到第一、第二、（第三被跳过）、  
      第四、（第五六七节点被跳过）、第八节点
- =add_text_data=
  为菜单的最后一个未添加指定属性的选项添加属性。仅支持 =type= =foot= =max= =min=
  这四种类型
- =show=
  显示菜单程序，返回经过处理的输入
  - 输入与返回值对照
    - 数字 => int型数字
    - 空格/回车 => 对应选项的序号
    - 字符 => int型字符
    - =q= / =ESC= => 0
***** 实际使用
参考使用代码：
#+begin_src c
  #include "/path/to/file/tools.h"    //引用头文件

  extern const ctools_menu CT_MENU;

  int main() {
          int input;    //用于保存输入的字符
          struct ctools_menu_t * data = NULL;    //这里指针名字任意，但一定要赋值为NULL
          // const ctools_menu *p = &CT_MENU;    // 可以将CT_MENU用一个指针指向或者直接定义变量赋值

          /* 初始化Ncurses */
          CT_MENU.ncurses_init();

          // 初始化指针（申请空间、赋值）
          CT_MENU.data_init(&data);

          //设置菜单的标题（以前留空会直接挂，现在可以留空）
          CT_MENU.set_title(data, "这里填写你的标题");

          //这里是设置类型，一般不用设置，因为已经初始化了
          CT_MENU.set_type(data, "normal");

          //一定要先添加选项再添加描述
          //一定要在参数的最后加上NULL作为结束符
          CT_MENU.set_text(data, "选项1", "选项2", "选项n", NULL);

          //谈及选项数据（条数不能超过选项的条数）
          //第三个参数是控制字符串，%s的数量不可以超过节点的数量
          CT_MENU.set_text_data(data, 0, "%s", "这是一条描述");

          //调用函数显示菜单，并保存返回值
          input = CT_MENU.show(data);

          //输入处理等。。。
          //.........
          endwin();
  }
#+end_src 
***** 操作介绍
移动按键支持三套：

- WASD
- hjkl（Vim的键位）
- 直接使用方向键 +（仅限Linux）+ （整套程序仅限Linux）

使用 =Tab= 键在选项与描述间跳转

使用空格或者回车确认选项或者输入对应的数字

使用 =Esc=, =q=, =0= 键可以退出菜单（会返回整型的0）

在设置页中，光标在数值型选项上时使用 =+=或 === 增加或使用 =-= 减少指定的 =foot=
变量值（默认为1）。在开关型选项上使用空格或者回车控制选项的状态为开或者关
**** 其他早期菜单
- =Menu= 函数，用于打印一个简陋的菜单界面，并在一定的程度上提供可视化选择（高亮
  当前选中项，回车、空格确认，或者直接输入要选择的数字），程序会统一返回对应的字
  符值（不是整数值！）//
  使用的相关代码
  #+begin_src c
    char *text[] = {    //用作储存要显示的选项
    "选项1",
    "选项2",
    ".....",
    "选项n"
    };
    int main(void)
    {
            Menu("菜单标题", text, allChose, allList);    //allChose为总选项数，allList为列数
            return 0;
    }
  #+end_src

- =Menu2= 用于打印菜单的边框
  #+begin_quote
  其中的选项内容为程序额外添加的，
  #+end_quote
- =Menu3= 与 =Menu2= 函数区别不大，主要就是没有翻页提示以及提示语变为了 =按任意键返回=
**** 配置文件解读程序
懒了，不想写了，自己看 =include/tools.h= 最后面的部分内容
